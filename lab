import 'package:flutter/material.dart';
import 'package:flutter_application_1/neon_button.dart';
import 'package:flutter_spinkit/flutter_spinkit.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Project',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: const MyHomePage(title: 'Home Page'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});
  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  bool isLoadding = false;
  @override
  Widget build(BuildContext context) => isLoadding
  ? const loaddingPage()
  :Scaffold( 
      appBar: AppBar(
        title: Text(widget.title),
      ),
      backgroundColor: Colors.black,
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.spaceEvenly,
          children: [
            ElevatedButton(
              style: ElevatedButton.styleFrom(
                textStyle: const TextStyle(fontSize: 24),
                minimumSize: const Size.fromHeight(72),
                shape: const StadiumBorder()),
              onPressed:() 
            async {
              setState(() {
                isLoadding = true;
              });
              await Future.delayed(Duration(seconds : 3));
              setState(() {
                isLoadding = false;
              });
            },
            child: isLoadding
            ? CircularProgressIndicator(color: Colors.white)
            : Text('LOGIN')),
            /*NeonButton(Colors.red),
            NeonButton(Colors.green),
            NeonButton(Colors.blue),
            NeonButton(Colors.yellow),
            NeonButton(Colors.blue),
            NeonButton(Colors.white),
            SpinKitCircle(
              size: 140,
              itemBuilder: ((context, index) {
                final colors =[ Colors.green, Colors.red,Colors.yellow];
                final color = colors[index % colors.length];
                return DecoratedBox(decoration: BoxDecoration(color: color));
              }),
            )*/
          ],
        ),
        
      ),
    );
  }

class loaddingPage extends StatelessWidget {
  const loaddingPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Center(
      child: SpinKitCircle(
              size: 140,
              itemBuilder: ((context, index) {
                final colors =[ Colors.green, Colors.red,Colors.yellow];
                final color = colors[index % colors.length];
                return DecoratedBox(decoration: BoxDecoration(color: color, shape: BoxShape.circle));
              }),
            ),
    );
  }
}
